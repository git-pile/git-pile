.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.48.1.
.TH GIT-PILE "1" "October 2021" "git-pile 0.98" "User Commands"
.SH NAME
git-pile \- git pile
.SH DESCRIPTION
usage: git\-pile [\-h] [\-v]
.IP
{init,setup,genpatches,genbranch,format\-patch,am,genlinear\-branch,baseline,destroy,reset}
\&...
.PP
Manage a pile of patches on top of a git branch
.PP
git\-pile helps to manage a long running and always changing list of patches on
top of git branch. It is similar to quilt, but aims to retain the git work flow
exporting the final result as a branch. The end result is a configuration setup
that can still be used with it.
.PP
There are 2 branches and one commit head that are important to understand how
git\-pile works:
.IP
PILE_BRANCH: where to keep the patches and track their history
RESULT_BRANCH: the result of applying the patches on top of (changing) base
.PP
The changing base is a commit that continues to be updated (either as a fast\-forward
or as non\-ff) onto where we want to be based off. This changing head is here
called BASELINE.
.IP
BASELINE: where patches will be applied on top of.
.PP
This is a typical scenario git\-pile is used in which BASELINE currently points
to a "master" branch and RESULT_BRANCH is "internal" (commit hashes here
onwards are fictitious).
.PP
A\-\-\-B\-\-\-C 3df0f8e (master)
.IP
\e
.IP
X\-\-\-Y\-\-\-Z internal
.PP
PILE_BRANCH is a branch containing this file hierarchy based on the above
example:
.PP
series  config  X.patch  Y.patch  Z.patch
.PP
The "series" and "config" files are there to allow git\-pile to do its job and
are retained for compatibility with quilt and qf. For that reason the latter is
also where BASELINE is stored/read when it's needed. git\-pile exposes commands
to convert back and forth between RESULT_BRANCH and the files on PILE_BRANCH.
Those commands allows to save the history of the patches when the BASELINE
changes or patches are added, modified or removed in RESULT_BRANCH. Below is a
example in which BASELINE may evolve to add more commit from upstream:
.IP
D\-\-\-E master
.IP
/
.PP
A\-\-\-B\-\-\-C 3df0f8e
.IP
\e
.IP
X\-\-\-Y\-\-\-Z internal
.PP
After a rebase of the RESULT_BRANCH we will have the following state, in
which X', Y' and Z' denote the rebased patches. They may have possibly
changed to solve conflicts or to apply cleanly:
.PP
A\-\-\-B\-\-\-C\-\-\-D\-\-\-E 76bc046 (master)
.IP
\e
.IP
X'\-\-\-Y'\-\-\-Z' internal
.PP
In turn, PILE_BRANCH will store the saved result:
.PP
series  config  X'.patch  Y'.patch  Z'.patch
.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-v\fR, \fB\-\-version\fR
show program's version number and exit
.SS "Commands:"
.IP
{init,setup,genpatches,genbranch,format\-patch,am,genlinear\-branch,baseline,destroy,reset}
.TP
init
Initialize configuration of an empty pile in this
repository
.TP
setup
Setup/copy configuration from a remote or already
created branches
.TP
genpatches
Generate patches from BASELINE..RESULT_BRANCH and save
to output directory
.TP
genbranch
Generate RESULT_BRANCH by applying patches from
PILE_BRANCH on top of BASELINE
.TP
format\-patch
Generate patches from BASELINE..HEAD and save patch
series to output directory to be shared on a mailing
list
.TP
am
Apply patch, generated by git\-pile format\-patch, to
the series and recreate RESULT_BRANCH
.TP
genlinear\-branch
Generate linear branch from genbranch on each pile
revision
.TP
baseline
Return the baseline commit hash
.TP
destroy
Destroy all git\-pile on this repo
.TP
reset
Reset RESULT_BRANCH and PILE_BRANCH to match remote
