.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.48.1.
.TH GIT-PILE-WRAPPER-FORMAT-PATCH: "1" "October 2021" "git-pile-wrapper-format-patch: 1: -e: not found" "User Commands"
.SH NAME
git-pile-wrapper-format-patch: \- git pile format-patch
.SH DESCRIPTION
\&./git\-pile\-wrapper\-format\-patch: 1: \fB\-e\fR: not found
usage: git\-pile format\-patch [\-h] [\-o OUTPUT_DIR] [\-f]
.TP
[\-\-subject\-prefix SUBJECT_PREFIX]
[\-\-no\-full\-patch] [\-\-allow\-local\-pile\-commits]
[\-\-creation\-factor CREATION_FACTOR] [\-C COMMIT]
[\-F FILE] [\-\-signoff]
[\-\-reroll\-count REROLL_COUNT] [\-\-debug]
[REFS ...]
.SS "positional arguments:"
.TP
REFS
Same arguments as the ones received by range\-diff in its several forms plus a
shortcut. From more verbose to the easiest ones:
1) OLD_BASELINE..OLD_RESULT_HEAD NEW_BASELINE..NEW_RESULT_HEAD
.TP
This should be used when rebasing the RESULT_BRANCH and thus having
different baselines
.TP
2) OLD_RESULT_HEAD...NEW_RESULT_HEAD or OLD_RESULT_HEAD NEW_RESULT_HEAD
This assumes the baseline remained the same. In the first form, the
same as used by git\-range\-diff, note the triple dots rather than double.
.TP
3) OLD_RESULT_HEAD NEW_RESULT_HEAD
Same as (2)
.TP
3) HEAD or no arguments
This is a shortcut: the current branch will be used as NEW_RESULT_HEAD and
the upstream of this branch as OLD_RESULT_HEAD. Example: if RESULT_BRANCH
is internal, this is equivalent to: internal@{u}...internal
.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-o\fR OUTPUT_DIR, \fB\-\-output\-directory\fR OUTPUT_DIR
Use OUTPUT_DIR to store the resulting files instead of the format\-output\-directory from config (default: CWD)
.TP
\fB\-f\fR, \fB\-\-force\fR
Force use of OUTPUT_DIR even if it has patches. The existent patches will be
removed.
.TP
\fB\-\-subject\-prefix\fR SUBJECT_PREFIX
Instead of the standard [PATCH] prefix in the subject line, use
[<Subject\-Prefix>]. See git\-format\-patch(1) for details.
.TP
\fB\-\-no\-full\-patch\fR
Do not generate patch with full diff
.TP
\fB\-\-allow\-local\-pile\-commits\fR, \fB\-\-local\fR
Bypass check for local pile commits to allow partial patch series. By default git\-pile checks the pile branch is in sync with the remote to avoid a situation where the patch series can't be applied by another person due to missing dependencies. That is a common scenario when preparing a v2 of a patch series and having the v1 temporarily applied.  However you may to avoid this check if this is what you really intend, preparing another patch series on top. In this case beware you will need to use the additional REFS parameter, pointing git\-pile to both the old and new states of RESULT_BRANCH
.TP
\fB\-\-creation\-factor\fR CREATION_FACTOR
\fB\-\-creation\-factor\fR argument passed to git\-range\-diff. It controls the percentage of change used to consider a patch new vs modified. See GIT\-RANGE\-DIFF(1)
.TP
\fB\-C\fR COMMIT, \fB\-\-reuse\-message\fR COMMIT
Take an existing commit object, and reuse the log message as the cover\-letter, like documented in GIT\-COMMIT(1)
.TP
\fB\-F\fR FILE, \fB\-\-file\fR FILE
Take the commit message from the given file. Use \- to read the message from the standard input. Like documented in GIT\-COMMIT(1)
.TP
\fB\-\-signoff\fR
Add s\-o\-b to the cover letter, like git\-merge \fB\-\-signoff\fR or git\-commit \fB\-\-signoff\fR do
.TP
\fB\-\-reroll\-count\fR REROLL_COUNT, \fB\-v\fR REROLL_COUNT
Mark the series as the <n>\-th iteration of the topic. This mimics the same behavior from git\-format\-patch
.TP
\fB\-\-debug\fR
Turn on debugging output
.PP
usage: git\-pile [\-h] [\-v]
.IP
{init,setup,genpatches,genbranch,format\-patch,am,genlinear\-branch,baseline,destroy,reset}
\&...
.PP
git\-pile: error: unrecognized arguments: \fB\-\-version\fR
